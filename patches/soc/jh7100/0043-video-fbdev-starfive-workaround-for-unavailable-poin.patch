From 29b63be742902da1aa27fdd41a2af75a96505511 Mon Sep 17 00:00:00 2001
From: "jack.zhu" <jack.zhu@starfivetech.com>
Date: Tue, 16 Mar 2021 23:53:55 +0800
Subject: [PATCH 43/56] video: fbdev: starfive: workaround for unavailable
 pointer of dtb

Fix sf_fb_map_video_memory in starfive_fb.c
---
 drivers/video/fbdev/starfive/starfive_fb.c | 25 +++++++++++++---------
 1 file changed, 15 insertions(+), 10 deletions(-)

diff --git a/drivers/video/fbdev/starfive/starfive_fb.c b/drivers/video/fbdev/starfive/starfive_fb.c
index 22bfff5e729c..18405a901768 100644
--- a/drivers/video/fbdev/starfive/starfive_fb.c
+++ b/drivers/video/fbdev/starfive/starfive_fb.c
@@ -37,8 +37,10 @@
 #include <asm/irq.h>
 #include <asm/div64.h>
 #include <asm/cacheflush.h>
+#include <linux/of.h>
 #include <linux/of_gpio.h>
 #include <linux/of_reserved_mem.h>
+#include <linux/of_address.h>
 #include <video/stf-vin.h>
 
 #include "starfive_fb.h"
@@ -636,18 +638,21 @@ static struct fb_ops sf_fb_ops = {
 
 static int sf_fb_map_video_memory(struct sf_fb_data *sf_dev)
 {
-	int  ret;
-	dma_addr_t fb_phys_addr = 0;
-
-	ret = of_reserved_mem_device_init(sf_dev->dev);
-	if(ret) {
-		dev_err(sf_dev->dev, "Could not get reserved memory\n");
-		return ret;
+	struct resource res_mem;
+	struct device_node *node;
+
+	node = of_parse_phandle(sf_dev->dev->of_node, "memory-region", 0);
+	if(node) {
+		of_address_to_resource(node, 0, &res_mem);
+		sf_dev->fb.screen_size = resource_size(&res_mem);
+		sf_dev->fb.fix.smem_start = res_mem.start;
+	} else {
+		dev_err(sf_dev->dev, "Could not get reserved memory.\n");
+		return -ENOMEM;
 	}
-	sf_dev->fb.screen_base = dma_alloc_coherent(sf_dev->dev, FB_MEM_SIZE, &fb_phys_addr, GFP_KERNEL);
-	sf_dev->fb.screen_size = FB_MEM_SIZE;
 
-	sf_dev->fb.fix.smem_start = fb_phys_addr;
+	sf_dev->fb.screen_base = devm_ioremap_resource(sf_dev->dev, &res_mem);
+	memset(sf_dev->fb.screen_base, 0, sf_dev->fb.screen_size);
 
 	return 0;
 }
-- 
2.30.2

