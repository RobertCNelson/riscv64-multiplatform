From 939d5c9ea06d45566fc5d99d57ae3bf43beca188 Mon Sep 17 00:00:00 2001
From: Tom <support@vamrs.com>
Date: Sat, 13 Mar 2021 15:22:38 +0800
Subject: [PATCH 37/56] i2c: designware: Add GPIO configuration for JH7100

[FIXME] why we can not do it in U-boot?

[geert: Rebase to v5.13-rc1]
[emil: Initialize gpios before registering driver]

Signed-off-by: Emil Renner Berthing <kernel@esmil.dk>
---
 arch/riscv/Kconfig.socs                     | 13 +++++++
 drivers/i2c/busses/i2c-designware-core.h    |  2 +
 drivers/i2c/busses/i2c-designware-master.c  | 42 +++++++++++++++++++++
 drivers/i2c/busses/i2c-designware-platdrv.c |  4 ++
 4 files changed, 61 insertions(+)

diff --git a/arch/riscv/Kconfig.socs b/arch/riscv/Kconfig.socs
index 0bfa0b7cd93c..aedf0a3d6fda 100644
--- a/arch/riscv/Kconfig.socs
+++ b/arch/riscv/Kconfig.socs
@@ -31,6 +31,19 @@ config SOC_STARFIVE_VIC7100
 	help
 	  This enables support for StarFive VIC7100 SoC Platform Hardware.
 
+menu "StarFive VIC7100 SoC Debug Option"
+	depends on SOC_STARFIVE_VIC7100
+
+config SOC_STARFIVE_VIC7100_I2C_GPIO
+	bool "VIC7100 SOC I2C GPIO init"
+	depends on I2C_DESIGNWARE_CORE
+	depends on SOC_STARFIVE_VIC7100
+	default y if SOC_STARFIVE_VIC7100
+	help
+	  enable VIC7100 DW I2C GPIO init in Synopsys DesignWare master driver
+
+endmenu
+
 config SOC_VIRT
 	bool "QEMU Virt Machine"
 	select CLINT_TIMER if RISCV_M_MODE
diff --git a/drivers/i2c/busses/i2c-designware-core.h b/drivers/i2c/busses/i2c-designware-core.h
index 6a53f75abf7c..c8e2c59bc29d 100644
--- a/drivers/i2c/busses/i2c-designware-core.h
+++ b/drivers/i2c/busses/i2c-designware-core.h
@@ -286,6 +286,8 @@ struct dw_i2c_dev {
 	int			(*init)(struct dw_i2c_dev *dev);
 	int			(*set_sda_hold_time)(struct dw_i2c_dev *dev);
 	int			mode;
+	int			scl_gpio;
+	int			sda_gpio;
 	struct i2c_bus_recovery_info rinfo;
 	bool			suspended;
 };
diff --git a/drivers/i2c/busses/i2c-designware-master.c b/drivers/i2c/busses/i2c-designware-master.c
index 9b08bb5df38d..879a4375563d 100644
--- a/drivers/i2c/busses/i2c-designware-master.c
+++ b/drivers/i2c/busses/i2c-designware-master.c
@@ -20,6 +20,7 @@
 #include <linux/pm_runtime.h>
 #include <linux/regmap.h>
 #include <linux/reset.h>
+#include <linux/gpio-starfive-vic.h>
 
 #include "i2c-designware-core.h"
 
@@ -164,6 +165,45 @@ static int i2c_dw_set_timings_master(struct dw_i2c_dev *dev)
 	return 0;
 }
 
+static void i2c_dw_configure_gpio(struct dw_i2c_dev *dev)
+{
+#ifdef CONFIG_SOC_STARFIVE_VIC7100_I2C_GPIO
+	if (dev->scl_gpio > 0 && dev->sda_gpio > 0) {
+		const char *name = dev_name(dev->dev);
+
+		SET_GPIO_dout_LOW(dev->scl_gpio);
+		SET_GPIO_dout_LOW(dev->sda_gpio);
+		SET_GPIO_doen_reverse_(dev->scl_gpio, 1);
+		SET_GPIO_doen_reverse_(dev->sda_gpio, 1);
+		if (!strcmp(name, "118b0000.i2c")) {
+			SET_GPIO_doen_i2c0_pad_sck_oe(dev->scl_gpio);
+			SET_GPIO_doen_i2c0_pad_sda_oe(dev->sda_gpio);
+			SET_GPIO_i2c0_pad_sck_in(dev->scl_gpio);
+			SET_GPIO_i2c0_pad_sda_in(dev->sda_gpio);
+		} else if (!strcmp(name, "118c0000.i2c")) {
+			SET_GPIO_doen_i2c1_pad_sck_oe(dev->scl_gpio);
+			SET_GPIO_doen_i2c1_pad_sda_oe(dev->sda_gpio);
+			SET_GPIO_i2c1_pad_sck_in(dev->scl_gpio);
+			SET_GPIO_i2c1_pad_sda_in(dev->sda_gpio);
+		} else if (!strcmp(name, "12450000.i2c")) {
+			SET_GPIO_doen_i2c2_pad_sck_oe(dev->scl_gpio);
+			SET_GPIO_doen_i2c2_pad_sda_oe(dev->sda_gpio);
+			SET_GPIO_i2c2_pad_sck_in(dev->scl_gpio);
+			SET_GPIO_i2c2_pad_sda_in(dev->sda_gpio);
+		} else if (!strcmp(name, "12460000.i2c")) {
+			SET_GPIO_doen_i2c3_pad_sck_oe(dev->scl_gpio);
+			SET_GPIO_doen_i2c3_pad_sda_oe(dev->sda_gpio);
+			SET_GPIO_i2c3_pad_sck_in(dev->scl_gpio);
+			SET_GPIO_i2c3_pad_sda_in(dev->sda_gpio);
+		} else {
+			dev_err(dev->dev, "unknown i2c adapter: %s\n", name);
+		}
+	} else {
+		dev_err(dev->dev, "scl/sda gpio number is invalid !\n");
+	}
+#endif
+}
+
 /**
  * i2c_dw_init_master() - Initialize the designware I2C master hardware
  * @dev: device private data
@@ -915,6 +955,8 @@ int i2c_dw_probe_master(struct dw_i2c_dev *dev)
 	if (ret)
 		return ret;
 
+	i2c_dw_configure_gpio(dev);
+
 	/*
 	 * Increment PM usage count during adapter registration in order to
 	 * avoid possible spurious runtime suspend when adapter device is
diff --git a/drivers/i2c/busses/i2c-designware-platdrv.c b/drivers/i2c/busses/i2c-designware-platdrv.c
index 4b37f28ec0c6..991dad781dd3 100644
--- a/drivers/i2c/busses/i2c-designware-platdrv.c
+++ b/drivers/i2c/busses/i2c-designware-platdrv.c
@@ -22,6 +22,7 @@
 #include <linux/mfd/syscon.h>
 #include <linux/module.h>
 #include <linux/of.h>
+#include <linux/of_gpio.h>
 #include <linux/platform_device.h>
 #include <linux/pm.h>
 #include <linux/pm_runtime.h>
@@ -205,6 +206,7 @@ static const struct dmi_system_id dw_i2c_hwmon_class_dmi[] = {
 
 static int dw_i2c_plat_probe(struct platform_device *pdev)
 {
+	struct device_node *np = pdev->dev.of_node;
 	struct i2c_adapter *adap;
 	struct dw_i2c_dev *dev;
 	struct i2c_timings *t;
@@ -221,6 +223,8 @@ static int dw_i2c_plat_probe(struct platform_device *pdev)
 	dev->flags = (uintptr_t)device_get_match_data(&pdev->dev);
 	dev->dev = &pdev->dev;
 	dev->irq = irq;
+	dev->scl_gpio = of_get_named_gpio(np, "scl-gpio", 0);
+	dev->sda_gpio = of_get_named_gpio(np, "sda-gpio", 0);
 	platform_set_drvdata(pdev, dev);
 
 	ret = dw_i2c_plat_request_regs(dev);
-- 
2.30.2

